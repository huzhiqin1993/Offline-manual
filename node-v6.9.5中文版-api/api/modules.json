{
  "source": "http://nodejs.cn/api/cn/api/modules.md",
  "modules": [
    {
      "textRaw": "Modules",
      "name": "module",
      "desc": "<p>稳定性: 3 - 锁定的</p>\n<p>Node.js 有一个简单的模块加载系统。\n在 Node.js 中，文件和模块是一一对应的（每个文件被视为一个独立的模块）。</p>\n<p>例子，假设有一个名为 <code>foo.js</code> 的文件：</p>\n<pre><code class=\"lang-js\">const circle = require(&#39;./circle.js&#39;);\nconsole.log(`半径为 4 的圆的面积是 ${circle.area(4)}`);\n</code></pre>\n<p>在第一行中，<code>foo.js</code> 加载了同一目录下的 <code>circle.js</code> 模块。</p>\n<p><code>circle.js</code> 文件的内容为：</p>\n<pre><code class=\"lang-js\">const PI = Math.PI;\n\nexports.area = (r) =&gt; PI * r * r;\n\nexports.circumference = (r) =&gt; 2 * PI * r;\n</code></pre>\n<p><code>circle.js</code> 模块导出了 <code>area()</code> 和 <code>circumference()</code> 两个函数。\n要想添加函数和对象到模块根，可以将它们添加到特殊的 <code>exports</code> 对象。</p>\n<p>模块内的本地变量是私有的，因为模块被 Node.js 包装在一个函数中（详见<a href=\"#modules_the_module_wrapper\">模块包装器</a>）。\n在这个例子中，变量 <code>PI</code> 是 <code>circle.js</code> 私有的。</p>\n<p>如果希望模块根导出为一个函数（比如构造函数）或一次导出一个完整的对象而不是每次都创建一个属性，可以把它赋值给 <code>module.exports</code> 而不是 <code>exports</code>。</p>\n<p>如下，<code>bar.js</code> 会用到 <code>square</code> 模块，<code>square</code> 导出一个构造函数：</p>\n<pre><code class=\"lang-js\">const square = require(&#39;./square.js&#39;);\nvar mySquare = square(2);\nconsole.log(`正方形的面积是 ${mySquare.area()}`);\n</code></pre>\n<p><code>square</code> 模块定义在 <code>square.js</code> 中：</p>\n<pre><code class=\"lang-js\">// 赋值给 `exports` 不会修改模块，必须使用 `module.exports`\nmodule.exports = (width) =&gt; {\n  return {\n    area: () =&gt; width * width\n  };\n}\n</code></pre>\n<p>模块系统在 <code>require(&quot;module&quot;)</code> 模块中实现。</p>\n",
      "miscs": [
        {
          "textRaw": "Accessing the main module",
          "name": "Accessing the main module",
          "type": "misc",
          "desc": "<p>当 Node.js 直接运行一个文件时，<code>require.main</code> 会被设为它的 <code>module</code>。\n这意味着你可以通过如下检测直接确定一个文件是否已运行：</p>\n<pre><code class=\"lang-js\">require.main === module\n</code></pre>\n<p>对于 <code>foo.js</code> 文件，如果通过 <code>node foo.js</code> 运行则为 <code>true</code>，但如果通过 <code>require(&#39;./foo&#39;)</code> 运行则为 <code>false</code>。</p>\n<p>因为 <code>module</code> 提供了一个 <code>filename</code> 属性（通常等同于 <code>__filename</code>），所以可以通过检查 <code>require.main.filename</code> 来获取当前应用程序的入口点。</p>\n"
        },
        {
          "textRaw": "Addenda: Package Manager Tips",
          "name": "Addenda: Package Manager Tips",
          "type": "misc",
          "desc": "<p>Node.js 的 <code>require()</code> 函数的语义被设计得足够通用化，可以支持许多合理的目录结构。\n包管理器程序（如 <code>dpkg</code>、<code>rpm</code> 和 <code>npm</code>）可以不用修改就能够从 Node.js 模块构建本地包。</p>\n<p>以下是一个推荐的目录结构：</p>\n<p>假设想要在 <code>/usr/lib/node/&lt;some-package&gt;/&lt;some-version&gt;</code> 目录中保存一个特定版本的包的内容。</p>\n<p>包可以依赖于其他包。\n为了安装包 <code>foo</code>，可能需要安装一个指定版本的 <code>bar</code> 包。\n<code>bar</code> 包也可能有依赖，且在某些情况下，依赖可能有冲突或形成循环。</p>\n<p>因为 Node.js 会查找它所加载的模块的实际路径（也就是说会解析符号链接），然后在 <code>node_modules</code> 目录中寻找它们的依赖，<a href=\"#modules_loading_from_node_modules_folders\">如下所述</a>，这种情况使用以下体系结构很容易解决：</p>\n<ul>\n<li><code>/usr/lib/node/foo/1.2.3/</code> - <code>foo</code> 包的内容，版本 1.2.3。</li>\n<li><code>/usr/lib/node/bar/4.3.2/</code> - <code>foo</code> 依赖的 <code>bar</code> 包的内容。</li>\n<li><code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> - <code>/usr/lib/node/bar/4.3.2/</code> 的符号链接。</li>\n<li><code>/usr/lib/node/bar/4.3.2/node_modules/*</code> - <code>bar</code> 所依赖的包的符号链接</li>\n</ul>\n<p>因此，即便存在循环依赖或依赖冲突，每个模块还是可以获得它所依赖的包的一个可用版本。</p>\n<p>当 <code>foo</code> 包中的代码调用 <code>require(&#39;bar&#39;)</code>，它会获得符号链接 <code>/usr/lib/node/foo/1.2.3/node_modules/bar</code> 指向的版本。\n然后，当 <code>bar</code> 包中的代码调用 <code>require(&#39;queue&#39;)</code>，它会获得符号链接 <code>/usr/lib/node/bar/4.3.2/node_modules/quux</code> 指向的版本。</p>\n<p>此外，为了进一步优化模块查找过程，不要将包直接放在 <code>/usr/lib/node</code> 目录中，而是将它们放在 <code>/usr/lib/node_modules/&lt;name&gt;/&lt;version&gt;</code> 目录中。\n这样 Node.js 就不会在 <code>/usr/node_modules</code> 或 <code>/node_modules</code> 目录中查找缺失的依赖。</p>\n<p>为了使模块在 Node.js 的 REPL 中可用，可能需要将 <code>/usr/lib/node_modules</code> 目录添加到 <code>$NODE_PATH</code> 环境变量中。\n由于在 <code>node_modules</code> 目录中查找模块使用的是相对路径，而调用 <code>require()</code> 的文件是基于实际路径的，因此包本身可以放在任何地方。</p>\n"
        },
        {
          "textRaw": "All Together...",
          "name": "All Together...",
          "type": "misc",
          "desc": "<p>想要获得调用 <code>require()</code> 时加载的确切的文件名，使用 <code>require.resolve()</code> 函数。</p>\n<p>综上所述，以下用伪代码描述的高级算法，解释 require.resolve 做了些什么：</p>\n<pre><code class=\"lang-txt\">从 Y 路径的模块 require(X)\n1. 如果 X 是一个核心模块，\n   a. 返回核心模块\n   b. 结束\n2. 如果 X 是以 &#39;./&#39; 或 &#39;/&#39; 或 &#39;../&#39; 开头\n   a. 加载文件(Y + X)\n   b. 加载目录(Y + X)\n3. 加载Node模块(X, dirname(Y))\n4. 抛出 &quot;未找到&quot;\n\n加载文件(X)\n1. 如果 X 是一个文件，加载 X 作为 JavaScript 文本。结束\n2. 如果 X.js 是一个文件，加载 X.js 作为 JavaScript 文本。结束\n3. 如果 X.json 是一个文件，解析 X.json 成一个 JavaScript 对象。结束\n4. 如果 X.node 是一个文件，加载 X.node 作为二进制插件。结束\n\n加载目录(X)\n1. 如果 X/package.json 是一个文件，\n   a. 解析 X/package.json，查找 &quot;main&quot; 字段\n   b. let M = X + (json main 字段)\n   c. 加载文件(M)\n2. 如果 X/index.js 是一个文件，加载  X/index.js 作为 JavaScript 文本。结束\n3. 如果 X/index.json 是一个文件，解析 X/index.json 成一个 JavaScript 对象。结束\n4. 如果 X/index.node 是一个文件，加载  X/index.node 作为二进制插件。结束\n\n加载Node模块(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. 加载文件(DIR/X)\n   b. 加载目录(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I &gt;= 0,\n   a. if PARTS[I] = &quot;node_modules&quot; CONTINUE\n   b. DIR = path join(PARTS[0 .. I] + &quot;node_modules&quot;)\n   c. DIRS = DIRS + DIR\n   d. let I = I - 1\n5. return DIRS\n</code></pre>\n"
        },
        {
          "textRaw": "Caching",
          "name": "Caching",
          "type": "misc",
          "desc": "<p>模块在第一次加载后会被缓存。\n这也意味着（类似其他缓存机制）如果每次调用 <code>require(&#39;foo&#39;)</code> 都解析到同一文件，则返回相同的对象。</p>\n<p>多次调用 <code>require(foo)</code> 不会导致模块的代码被执行多次。\n这是一个重要的特性。\n借助它, 可以返回“部分完成”的对象，从而允许加载传递的依赖, 即使它们会导致循环。</p>\n<p>如果想要多次执行一个模块，可以导出一个函数，然后调用该函数。</p>\n",
          "miscs": [
            {
              "textRaw": "Module Caching Caveats",
              "name": "Module Caching Caveats",
              "type": "misc",
              "desc": "<p>模块是基于其解析的文件名进行缓存的。\n由于调用模块的位置的不同，模块可能被解析成不同的文件名（比如从 <code>node_modules</code> 目录加载），这样就不能保证 <code>require(&#39;foo&#39;)</code> 总能返回完全相同的对象。</p>\n<p>此外，在不区分大小写的文件系统或操作系统中，被解析成不同的文件名可以指向同一文件，但缓存仍然会将它们视为不同的模块，并多次重新加载。\n例如，<code>require(&#39;./foo&#39;)</code> 和 <code>require(&#39;./FOO&#39;)</code> 返回两个不同的对象，而不会管 <code>./foo</code> 和 <code>./FOO</code> 是否是相同的文件。</p>\n"
            }
          ]
        },
        {
          "textRaw": "Core Modules",
          "name": "Core Modules",
          "type": "misc",
          "desc": "<p>Node.js 有些模块会被编译成二进制。\n这些模块别的地方有更详细的描述。</p>\n<p>核心模块定义在 Node.js 源代码的 <code>lib/</code> 目录下。</p>\n<p><code>require()</code> 总是会优先加载核心模块。\n例如，<code>require(&#39;http&#39;)</code> 始终返回内置的 HTTP 模块，即使有同名文件。</p>\n"
        },
        {
          "textRaw": "Cycles",
          "name": "Cycles",
          "type": "misc",
          "desc": "<p>当循环调用 <code>require()</code> 时，一个模块可能在未完成执行时被返回。</p>\n<p>例如以下情况:</p>\n<p><code>a.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;a 开始&#39;);\nexports.done = false;\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;在 a 中，b.done = %j&#39;, b.done);\nexports.done = true;\nconsole.log(&#39;a 结束&#39;);\n</code></pre>\n<p><code>b.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;b 开始&#39;);\nexports.done = false;\nconst a = require(&#39;./a.js&#39;);\nconsole.log(&#39;在 b 中，a.done = %j&#39;, a.done);\nexports.done = true;\nconsole.log(&#39;b 结束&#39;);\n</code></pre>\n<p><code>main.js</code>:</p>\n<pre><code class=\"lang-js\">console.log(&#39;main 开始&#39;);\nconst a = require(&#39;./a.js&#39;);\nconst b = require(&#39;./b.js&#39;);\nconsole.log(&#39;在 main 中，a.done=%j，b.done=%j&#39;, a.done, b.done);\n</code></pre>\n<p>当 <code>main.js</code> 加载 <code>a.js</code> 时，<code>a.js</code> 又加载 <code>b.js</code>。\n此时，<code>b.js</code> 会尝试去加载 <code>a.js</code>。\n为了防止无限的循环，会返回一个 <code>a.js</code> 的 <code>exports</code> 对象的 <strong>未完成的副本</strong> 给 <code>b.js</code> 模块。\n然后 <code>b.js</code> 完成加载，并将 <code>exports</code> 对象提供给 <code>a.js</code> 模块。</p>\n<p>当 <code>main.js</code> 加载这两个模块时，它们都已经完成加载。\n因此，该程序的输出会是：</p>\n<pre><code class=\"lang-txt\">$ node main.js\nmain 开始\na 开始\nb 开始\n在 b 中，a.done = false\nb 结束\n在 a 中，b.done = true\na 结束\n在 main 中，a.done=true，b.done=true\n</code></pre>\n<p>如果你的程序里有循环的模块依赖，确保它们按计划执行。</p>\n"
        },
        {
          "textRaw": "File Modules",
          "name": "File Modules",
          "type": "misc",
          "desc": "<p>如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 <code>.js</code>、<code>.json</code> 或 <code>.node</code> 拓展名再加载。</p>\n<p><code>.js</code> 文件会被解析为 JavaScript 文本文件，<code>.json</code> 文件会被解析为 JSON 文本文件。\n<code>.node</code> 文件会被解析为通过 <code>dlopen</code> 加载的编译后的插件模块。</p>\n<p>以 <code>&#39;/&#39;</code> 为前缀的模块是文件的绝对路径。\n例如，<code>require(&#39;/home/marco/foo.js&#39;)</code> 会加载 <code>/home/marco/foo.js</code> 文件。</p>\n<p>以 <code>&#39;./&#39;</code> 为前缀的模块是相对于调用 <code>require()</code> 的文件的。\n也就是说，<code>circle.js</code> 必须和 <code>foo.js</code> 在同一目录下以便于 <code>require(&#39;./circle&#39;)</code> 找到它。</p>\n<p>当没有以 <code>&#39;/&#39;</code>、<code>&#39;./&#39;</code> 或 <code>&#39;../&#39;</code> 开头来表示文件时，这个模块必须是一个核心模块或加载自 <code>node_modules</code> 目录。</p>\n<p>如果给定的路径不存在，则 <code>require()</code> 会抛出一个 <code>code</code> 属性为 <code>&#39;MODULE_NOT_FOUND&#39;</code> 的 <a href=\"errors.html#errors_class_error\"><code>Error</code></a>。</p>\n"
        },
        {
          "textRaw": "Folders as Modules",
          "name": "Folders as Modules",
          "type": "misc",
          "desc": "<p>可以把程序和库放到一个单独的目录，然后提供一个单一的入口来指向它。\n把目录递给 <code>require()</code> 作为一个参数，有三种方式。</p>\n<p>第一种方式是在根目录下创建一个 <code>package.json</code> 文件，并指定一个 <code>main</code> 模块。\n例子，<code>package.json</code> 文件类似：</p>\n<pre><code class=\"lang-json\">{ &quot;name&quot; : &quot;some-library&quot;,\n  &quot;main&quot; : &quot;./lib/some-library.js&quot; }\n</code></pre>\n<p>如果这是在 <code>./some-library</code> 目录中，则 <code>require(&#39;./some-library&#39;)</code> 会试图加载 <code>./some-library/lib/some-library.js</code>。</p>\n<p>这就是 Node.js 处理 <code>package.json</code> 文件的方式。</p>\n<p>注意：如果 <code>package.json</code> 中 <code>&quot;main&quot;</code> 入口指定的文件不存在，则无法解析，Node.js 会将模块视为不存在，并抛出默认错误：</p>\n<pre><code class=\"lang-txt\">Error: Cannot find module &#39;some-library&#39;\n</code></pre>\n<p>如果目录里没有 <code>package.json</code> 文件，则 Node.js 就会试图加载目录下的 <code>index.js</code> 或 <code>index.node</code> 文件。\n例如，如果上面的例子中没有 <code>package.json</code> 文件，则 <code>require(&#39;./some-library&#39;)</code> 会试图加载：</p>\n<ul>\n<li><code>./some-library/index.js</code></li>\n<li><code>./some-library/index.node</code></li>\n</ul>\n"
        },
        {
          "textRaw": "Loading from `node_modules` Folders",
          "name": "Loading from `node_modules` Folders",
          "type": "misc",
          "desc": "<p>如果传递给 <code>require()</code> 的模块标识符不是一个原生模块，也没有以 <code>&#39;/&#39;</code> 、 <code>&#39;../&#39;</code> 或 <code>&#39;./&#39;</code> 开头，则 Node.js 会从当前模块的父目录开始，尝试从它的 <code>/node_modules</code> 目录里加载模块。\nNode.js 不会附加 <code>node_modules</code> 到一个已经以 <code>node_modules</code> 结尾的路径上。</p>\n<p>如果还是没有找到，则移动到再上一层父目录，直到文件系统的根目录。</p>\n<p>例子，如果在 <code>&#39;/home/ry/projects/foo.js&#39;</code> 文件里调用了 <code>require(&#39;bar.js&#39;)</code>，则 Node.js 会按以下顺序查找：</p>\n<ul>\n<li><code>/home/ry/projects/node_modules/bar.js</code></li>\n<li><code>/home/ry/node_modules/bar.js</code></li>\n<li><code>/home/node_modules/bar.js</code></li>\n<li><code>/node_modules/bar.js</code></li>\n</ul>\n<p>这使得程序本地化它们的依赖，避免它们产生冲突。</p>\n<p>通过在模块名后包含一个路径后缀，可以请求特定的文件或分布式的子模块。\n例如，<code>require(&#39;example-module/path/to/file&#39;)</code> 会把 <code>path/to/file</code> 解析成相对于 <code>example-module</code> 的位置。\n后缀路径同样遵循模块的解析语法。</p>\n"
        },
        {
          "textRaw": "Loading from the global folders",
          "name": "Loading from the global folders",
          "type": "misc",
          "desc": "<p>如果 <code>NODE_PATH</code> 环境变量被设为一个以冒号分割的绝对路径列表，则当在其他地方找不到模块时 Node.js 会搜索这些路径。\n（注意：在 Windows 系统中，<code>NODE_PATH</code> 是以分号间隔的。）</p>\n<p>在当前的<a href=\"#modules_all_together\">模块解析</a>算法运行之前，<code>NODE_PATH</code> 最初是创建来支持从不同路径加载模块的。</p>\n<p>虽然 <code>NODE_PATH</code> 仍然被支持，但现在不太需要，因为 Node.js 生态系统已制定了一套存放依赖模块的约定。\n有时当人们没意识到 <code>NODE_PATH</code> 必须被设置时，依赖 <code>NODE_PATH</code> 的部署会出现意料之外的行为。\n有时一个模块的依赖会改变，导致在搜索 <code>NODE_PATH</code> 时加载了不同的版本（甚至不同的模块）。</p>\n<p>此外，Node.js 还会搜索以下位置：</p>\n<ul>\n<li>1: <code>$HOME/.node_modules</code></li>\n<li>2: <code>$HOME/.node_libraries</code></li>\n<li>3: <code>$PREFIX/lib/node</code></li>\n</ul>\n<p>其中 <code>$HOME</code> 是用户的主目录，<code>$PREFIX</code> 是 Node.js 里配置的 <code>node_prefix</code>。</p>\n<p>这些主要是历史原因。\n<strong>强烈建议将所有的依赖放在 <code>node_modules</code> 目录。</strong>\n它们将会更快地加载，且更可靠。</p>\n"
        },
        {
          "textRaw": "The module wrapper",
          "name": "The module wrapper",
          "type": "misc",
          "desc": "<p>在执行模块代码之前，Node.js 会使用一个如下的函数包装器将其包装：</p>\n<pre><code class=\"lang-js\">(function (exports, require, module, __filename, __dirname) {\n// 你的模块代码实际上在这里\n});\n</code></pre>\n<p>通过这样做，Node.js 实现了以下几点：</p>\n<ul>\n<li>它保持了顶层的变量（用 <code>var</code>、<code>const</code> 或 <code>let</code> 定义）作用在模块范围内，而不是全局对象。</li>\n<li>它有助于提供一些看似全局的但实际上是模块特定的变量，例如：<ul>\n<li>实现者可以使用 <code>module</code> 和 <code>exports</code> 对象从模块中导出值。</li>\n<li>快捷变量 <code>__filename</code> 和 <code>__dirname</code> 包含模块的绝对文件名和目录路径。</li>\n</ul>\n</li>\n</ul>\n"
        }
      ],
      "vars": [
        {
          "textRaw": "The `module` Object",
          "name": "module",
          "meta": {
            "added": [
              "http://nodejs.cn/api/v0.1.16"
            ]
          },
          "type": "var",
          "desc": "<ul>\n<li>{Object}</li>\n</ul>\n<p>在每个模块中，<code>module</code> 的自由变量是一个指向表示当前模块的对象的引用。\n为了方便，<code>module.exports</code> 也可以通过全局模块的 <code>exports</code> 对象访问。\n<code>module</code> 实际上不是全局的，而是每个模块本地的。</p>\n",
          "properties": [
            {
              "textRaw": "`children` {Array} ",
              "type": "Array",
              "name": "children",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p>被该模块引用的模块对象。</p>\n"
            },
            {
              "textRaw": "`exports` {Object} ",
              "type": "Object",
              "name": "exports",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p><code>module.exports</code> 对象是由模块系统创建的。\n有时这是难以接受的；许多人希望他们的模块成为某个类的实例。\n为了实现这个，需要将期望导出的对象赋值给 <code>module.exports</code>。\n注意，将期望的对象赋值给 <code>exports</code> 会简单地重新绑定到本地 <code>exports</code> 变量上，这可能不是你想要的。</p>\n<p>例子，假设创建了一个名为 <code>a.js</code> 的模块：</p>\n<pre><code class=\"lang-js\">const EventEmitter = require(&#39;events&#39;);\n\nmodule.exports = new EventEmitter();\n\n// 处理一些工作，并在一段时间后从模块自身触发 &#39;ready&#39; 事件。\nsetTimeout(() =&gt; {\n  module.exports.emit(&#39;ready&#39;);\n}, 1000);\n</code></pre>\n<p>然后，在另一个文件中可以这么做：</p>\n<pre><code class=\"lang-js\">const a = require(&#39;./a&#39;);\na.on(&#39;ready&#39;, () =&gt; {\n  console.log(&#39;模块 a 已准备好&#39;);\n});\n</code></pre>\n<p>注意，对 <code>module.expors</code> 的赋值必须立即完成。\n不能在任何回调中完成。\n以下是无效的：</p>\n<p>x.js:</p>\n<pre><code class=\"lang-js\">setTimeout(() =&gt; {\n  module.exports = { a: &#39;hello&#39; };\n}, 0);\n</code></pre>\n<p>y.js:</p>\n<pre><code class=\"lang-js\">const x = require(&#39;./x&#39;);\nconsole.log(x.a);\n</code></pre>\n",
              "modules": [
                {
                  "textRaw": "exports shortcut",
                  "name": "exports_shortcut",
                  "meta": {
                    "added": [
                      "http://nodejs.cn/api/v0.1.16"
                    ]
                  },
                  "desc": "<p><code>exports</code> 变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋于 <code>module.exports</code> 的值。</p>\n<p>它有一个快捷方式，以便 <code>module.exports.f = ...</code> 可以被更简洁地写成 <code>exports.f = ...</code>。\n注意，就像任何变量，如果一个新的值被赋值给 <code>exports</code>，它就不再绑定到 <code>module.exports</code>：</p>\n<pre><code class=\"lang-js\">module.exports.hello = true; // 从被引用的模块导出\nexports = { hello: false };  // 不导出，只在模块内有效\n</code></pre>\n<p>当 <code>module.exports</code> 属性被一个新的对象完全替代时，也会重新赋值 <code>exports</code>，例如：</p>\n<pre><code class=\"lang-js\">module.exports = exports = function Constructor() {\n    // ... 及其他\n</code></pre>\n<p>为了解释这个行为，想象对 <code>require()</code> 的假设实现，它跟 <code>require()</code> 的实际实现相等类似：</p>\n<pre><code class=\"lang-js\">function require(...) {\n  var module = { exports: {} };\n  ((module, exports) =&gt; {\n    // 你的模块代码在这。在这个例子中，定义了一个函数。\n    function some_func() {};\n    exports = some_func;\n    // 此时，exports 不再是一个 module.exports 的快捷方式，\n    // 且这个模块依然导出一个空的默认对象。\n    module.exports = some_func;\n    // 此时，该模块导出 some_func，而不是默认对象。\n  })(module, module.exports);\n  return module.exports;\n}\n</code></pre>\n",
                  "type": "module",
                  "displayName": "exports shortcut"
                }
              ]
            },
            {
              "textRaw": "`filename` {String} ",
              "type": "String",
              "name": "filename",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p>模块的完全解析后的文件名。</p>\n"
            },
            {
              "textRaw": "`id` {String} ",
              "type": "String",
              "name": "id",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p>模块的标识符。\n通常是完全解析后的文件名。</p>\n"
            },
            {
              "textRaw": "`loaded` {Boolean} ",
              "type": "Boolean",
              "name": "loaded",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p>模块是否已经加载完成，或正在加载中。</p>\n"
            },
            {
              "textRaw": "`parent` {Object} 模块对象 ",
              "type": "Object",
              "name": "parent",
              "meta": {
                "added": [
                  "http://nodejs.cn/api/v0.1.16"
                ]
              },
              "desc": "<p>最先引用该模块的模块。</p>\n",
              "shortDesc": "模块对象"
            }
          ],
          "methods": [
            {
              "textRaw": "module.require(id)",
              "type": "method",
              "name": "require",
              "meta": {
                "added": [
                  "v0.5.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`id` {String} ",
                      "name": "id",
                      "type": "String"
                    },
                    {
                      "textRaw": "返回: {Object} 已解析的模块的 `module.exports` ",
                      "name": "返回",
                      "type": "Object",
                      "desc": "已解析的模块的 `module.exports`"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "id"
                    }
                  ]
                }
              ],
              "desc": "<p><code>module.require</code> 方法提供了一种类似 <code>require()</code> 从原始模块被调用的加载模块的方式。</p>\n<p>注意，为了做到这个，你必须获得一个 <code>module</code> 对象的引用。\n因为 <code>require()</code> 会返回 <code>module.exports</code>，且 <code>module</code> <strong>只</strong>在一个特定的模块代码中有效，所以为了使用它，必须显式地导出。</p>\n"
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "module"
    }
  ]
}