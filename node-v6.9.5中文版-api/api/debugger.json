{
  "source": "http://nodejs.cn/api/cn/api/debugger.md",
  "properties": [
    {
      "textRaw": "V8 Inspector Integration for Node.js"/*tpa=http://nodejs.cn/api/V8 Inspector Integration for Node.js*/,
      "name": "js",
      "desc": "<p><strong>注意：这是一个试验的特性。</strong></p>\n<p>V8 的检查器集成可以附加 Chrome 的开发者工具到 Node.js 实例以用于调试和性能分析。</p>\n<p>当启动一个 Node.js 应用时，V8 检查器可以通过传入 <code>--inspect</code> 标志启用。\n也可以通过该标志提供一个自定义的端口，如 <code>--inspect=9222</code> 会在 9222 端口接受开发者工具连接。</p>\n<p>要想在应用代码的第一行断开，可以在除 <code>--inspect</code> 之外再提供 <code>--debug-brk</code> 标志。</p>\n<pre><code class=\"lang-txt\">$ node --inspect index.js\nDebugger listening on port 9229.\nWarning: This is an experimental feature and could change at any time.\nTo start debugging, open the following URL in Chrome:\n    chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node\n</code></pre>\n"
    }
  ],
  "miscs": [
    {
      "textRaw": "Debugger",
      "name": "Debugger",
      "desc": "<p>稳定性: 2 - 稳定的</p>\n<p>Node.js 包含一个进程外的调试工具，可以通过<a href=\"https://github.com/v8/v8/wiki/Debugging-Protocol\">基于 TCP 的协议</a>和内置调试客户端访问。\n要使用它，可以带上 <code>debug</code> 参数启动 Node.js，并带上需要调试的脚本的路径；然后会显示一个提示，表明成功启动调试器：</p>\n<pre><code class=\"lang-txt\">$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt;\n</code></pre>\n<p>Node.js 的调试器客户端还未支持全部特性，但可以做些简单的步骤和检测。</p>\n<p>在脚本的源代码中插入 <code>debugger;</code> 语句，则会在代码的那个位置启用一个断点：</p>\n<pre><code class=\"lang-js\">// myscript.js\nx = 5;\nsetTimeout(() =&gt; {\n  debugger;\n  console.log(&#39;world&#39;);\n}, 1000);\nconsole.log(&#39;hello&#39;);\n</code></pre>\n<p>一旦运行调试器，则会在第 4 行出现一个断点：</p>\n<pre><code class=\"lang-txt\">$ node debug myscript.js\n&lt; debugger listening on port 5858\nconnecting... ok\nbreak in /home/indutny/Code/git/indutny/myscript.js:1\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\ndebug&gt; cont\n&lt; hello\nbreak in /home/indutny/Code/git/indutny/myscript.js:3\n  1 x = 5;\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\ndebug&gt; next\nbreak in /home/indutny/Code/git/indutny/myscript.js:4\n  2 setTimeout(() =&gt; {\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\n  6 console.log(&#39;hello&#39;);\ndebug&gt; repl\nPress Ctrl + C to leave debug repl\n&gt; x\n5\n&gt; 2+2\n4\ndebug&gt; next\n&lt; world\nbreak in /home/indutny/Code/git/indutny/myscript.js:5\n  3   debugger;\n  4   console.log(&#39;world&#39;);\n  5 }, 1000);\n  6 console.log(&#39;hello&#39;);\n  7\ndebug&gt; quit\n</code></pre>\n<p><code>repl</code> 命令用于运行代码。\n<code>next</code> 命令用于步入下一行。\n输入 <code>help</code> 可查看其他可用的命令。</p>\n<p>按下 <code>enter</code> 键且不输入命令，可重复上一个调试命令。</p>\n",
      "type": "misc",
      "miscs": [
        {
          "textRaw": "Watchers",
          "name": "watchers",
          "desc": "<p>可以在调试时监视表达式和变量的值。\n在每个断点上，监视器列表中的每个表达式都会在当前上下文中被执行，并在断点的源代码列表之前立即显示。</p>\n<p>输入 <code>watch(&#39;my_expression&#39;)</code> 开始监视一个表达式。\n<code>watchers</code> 命令会打印已激活的监视器。\n输入 <code>unwatch(&#39;my_expression&#39;)</code> 来移除一个监视器。</p>\n",
          "type": "misc",
          "displayName": "Watchers"
        },
        {
          "textRaw": "Command reference",
          "name": "command_reference",
          "modules": [
            {
              "textRaw": "Stepping",
              "name": "Stepping",
              "desc": "<ul>\n<li><code>cont</code>, <code>c</code> - 继续执行</li>\n<li><code>next</code>, <code>n</code> - 下一步</li>\n<li><code>step</code>, <code>s</code> - 跳进函数</li>\n<li><code>out</code>, <code>o</code> - 跳出函数</li>\n<li><code>pause</code> - 暂停运行代码（类似开发者工具中的暂停按钮）</li>\n</ul>\n",
              "type": "module",
              "displayName": "Breakpoints"
            },
            {
              "textRaw": "Breakpoints",
              "name": "breakpoints",
              "desc": "<ul>\n<li><code>setBreakpoint()</code>, <code>sb()</code> - 在当前行设置断点</li>\n<li><code>setBreakpoint(line)</code>, <code>sb(line)</code> - 在指定行设置断点</li>\n<li><code>setBreakpoint(&#39;fn()&#39;)</code>, <code>sb(...)</code> - 在函数体的第一条语句设置断点</li>\n<li><code>setBreakpoint(&#39;script.js&#39;, 1)</code>, <code>sb(...)</code> - 在 script.js 的第 1 行设置断点</li>\n<li><code>clearBreakpoint(&#39;script.js&#39;, 1)</code>, <code>cb(...)</code> - 清除 script.js 第 1 行的断点</li>\n</ul>\n<p>也可以在一个还未被加载的文件（模块）中设置断点：</p>\n<pre><code class=\"lang-txt\">$ node debug test/fixtures/break-in-module/main.js\n&lt; debugger listening on port 5858\nconnecting to port 5858... ok\nbreak in test/fixtures/break-in-module/main.js:1\n  1 var mod = require(&#39;./mod.js&#39;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; setBreakpoint(&#39;mod.js&#39;, 23)\nWarning: script &#39;mod.js&#39; was not loaded yet.\n  1 var mod = require(&#39;./mod.js&#39;);\n  2 mod.hello();\n  3 mod.hello();\ndebug&gt; c\nbreak in test/fixtures/break-in-module/mod.js:23\n 21\n 22 exports.hello = () =&gt; {\n 23   return &#39;hello from module&#39;;\n 24 };\n 25\ndebug&gt;\n</code></pre>\n",
              "type": "module",
              "displayName": "Breakpoints"
            },
            {
              "textRaw": "Execution control",
              "name": "Execution control",
              "desc": "<ul>\n<li><code>run</code> - 运行脚本（调试器开始时自动运行）</li>\n<li><code>restart</code> - 重新启动脚本</li>\n<li><code>kill</code> - 终止脚本</li>\n</ul>\n",
              "type": "module",
              "displayName": "Various"
            },
            {
              "textRaw": "Various",
              "name": "various",
              "desc": "<ul>\n<li><code>scripts</code> - 列出所有已加载的脚本</li>\n<li><code>version</code> - 显示 V8 引擎的版本号</li>\n</ul>\n",
              "type": "module",
              "displayName": "Various"
            }
          ],
          "type": "misc",
          "displayName": "Command reference"
        },
        {
          "textRaw": "Advanced Usage",
          "name": "advanced_usage",
          "desc": "<p>启用和访问调试器的另一种方式，是启动 Node.js 时带上 <code>--debug</code> 命令行标志，或向一个已存在的 Node.js 进程发送 <code>SIGUSR1</code> 信号。</p>\n<p>一旦一个进程以这种方式被设为调试模式，它就可以被 Node.js 调试器使用，通过连接到正在运行的进程的 <code>pid</code> 或通过正在监听的调试器的 URI 引用：</p>\n<ul>\n<li><code>node debug -p &lt;pid&gt;</code> - 通过 <code>pid</code> 连接进程</li>\n<li><code>node debug &lt;URI&gt;</code> - 通过 URI 连接进程，如 localhost:5858</li>\n</ul>\n",
          "type": "misc",
          "displayName": "Advanced Usage"
        }
      ],
      "properties": [
        {
          "textRaw": "V8 Inspector Integration for Node.js"/*tpa=http://nodejs.cn/api/V8 Inspector Integration for Node.js*/,
          "name": "js",
          "desc": "<p><strong>注意：这是一个试验的特性。</strong></p>\n<p>V8 的检查器集成可以附加 Chrome 的开发者工具到 Node.js 实例以用于调试和性能分析。</p>\n<p>当启动一个 Node.js 应用时，V8 检查器可以通过传入 <code>--inspect</code> 标志启用。\n也可以通过该标志提供一个自定义的端口，如 <code>--inspect=9222</code> 会在 9222 端口接受开发者工具连接。</p>\n<p>要想在应用代码的第一行断开，可以在除 <code>--inspect</code> 之外再提供 <code>--debug-brk</code> 标志。</p>\n<pre><code class=\"lang-txt\">$ node --inspect index.js\nDebugger listening on port 9229.\nWarning: This is an experimental feature and could change at any time.\nTo start debugging, open the following URL in Chrome:\n    chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/node\n</code></pre>\n"
        }
      ]
    }
  ]
}