{
  "source": "http://nodejs.cn/api/cn/api/timers.md",
  "modules": [
    {
      "textRaw": "Timers",
      "name": "timers",
      "desc": "<p>稳定性: 3 - 锁定的</p>\n<p><code>timer</code> 模块暴露了一个全局的 API，用于在某个未来时间段调用调度函数。\n因为定时器函数是全局的，所以使用该 API 无需调用 <code>require(&#39;timers&#39;)</code>。</p>\n<p>Node.js 中的计时器函数实现了与 Web 浏览器提供的定时器类似的 API，除了它使用了一个不同的内部实现，它是基于 <a href=\"https://github.com/nodejs/node/blob/master/doc/topics/event-loop-timers-and-nexttick.md\">Node.js 事件循环</a>构建的。</p>\n",
      "classes": [
        {
          "textRaw": "Class: Immediate",
          "type": "class",
          "name": "Immediate",
          "desc": "<p>该对象是内部创建的，并从 <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a> 返回。\n它可以传给 <a href=\"timers.html#timers_clearimmediate_immediate\"><code>clearImmediate()</code></a> 以便取消预定的动作。</p>\n"
        },
        {
          "textRaw": "Class: Timeout",
          "type": "class",
          "name": "Timeout",
          "desc": "<p>该对象是内部创建的，并从 <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> 和 <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> 返回。\n它可以传给 <a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a> 或 <a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval()</code></a> 以便取消预定的动作。</p>\n<p>默认情况下，当使用 <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> 或 <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> 预定一个定时器时，只要定时器处于活动状态，Node.js 事件循环就会继续运行。\n每个由这些函数返回的 <code>Timeout</code> 对象都导出了可用于控制这个默认行为的 <code>timeout.ref()</code> 和 <code>timeout.unref()</code> 函数。</p>\n",
          "methods": [
            {
              "textRaw": "timeout.ref()",
              "type": "method",
              "name": "ref",
              "meta": {
                "added": [
                  "v0.9.1"
                ]
              },
              "desc": "<p>调用时，只要 <code>Timeout</code> 处于活动状态就要求 Node.js 事件循环不要退出。\n多次调用 <code>timeout.ref()</code> 没有效果。</p>\n<p>注意：默认情况下，所有 <code>Timeout</code> 对象都是 &quot;ref&#39;d&quot; 的，通常不需要调用 <code>timeout.ref()</code>，除非之前调用了 <code>timeout.unref()</code>。</p>\n<p>返回 <code>Timeout</code> 的一个引用。</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            },
            {
              "textRaw": "timeout.unref()",
              "type": "method",
              "name": "unref",
              "meta": {
                "added": [
                  "v0.9.1"
                ]
              },
              "desc": "<p>当调用时，活动的 <code>Timeout</code> 对象不要求 Node.js 事件循环保持活动。\n如果没有其他活动保持事件循环运行，则进程可能在 <code>Timeout</code> 对象的回调被调用之前退出。\n多次调用 <code>timeout.unref()</code> 没有效果。</p>\n<p>注意：调用 <code>timeout.unref()</code> 会创建一个内部定时器，它会唤醒 Node.js 的事件循环。\n创建太多这类定时器可能会对 Node.js 应用程序的性能产生负面影响。</p>\n<p>返回对 <code>Timeout</code> 的一个引用。</p>\n",
              "signatures": [
                {
                  "params": []
                }
              ]
            }
          ]
        }
      ],
      "modules": [
        {
          "textRaw": "Scheduling Timers",
          "name": "scheduling_timers",
          "desc": "<p>Node.js 中的计时器是一种会在一段时间后调用给定的函数的内部构造。\n定时器函数何时被调用取决于用来创建定时器的方法以及 Node.js 事件循环正在做的其他工作。</p>\n",
          "methods": [
            {
              "textRaw": "setImmediate(callback[, ...args])",
              "type": "method",
              "name": "setImmediate",
              "meta": {
                "added": [
                  "v0.9.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} 在 [Node.js 事件循环]的当前回合结束时要调用的函数。 ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "在 [Node.js 事件循环]的当前回合结束时要调用的函数。"
                    },
                    {
                      "textRaw": "`...args` {any} 当调用 `callback` 时要传入的可选参数。 ",
                      "name": "http://nodejs.cn/api/...args",
                      "type": "any",
                      "desc": "当调用 `callback` 时要传入的可选参数。",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "http://nodejs.cn/api/...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>预定立即执行的 <code>callback</code>，它是在 I/O 事件的回调之后、在使用 <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> 和 <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> 创建的计时器之前被触发。\n返回一个用于 <a href=\"timers.html#timers_clearimmediate_immediate\"><code>clearImmediate()</code></a> 的 <code>Immediate</code>。</p>\n<p>当多次调用 <code>setImmediate()</code> 时，<code>callback</code> 函数会按照它们被创建的顺序依次执行。\n每次事件循环迭代都会处理整个回调队列。\n如果一个立即定时器是被一个正在执行的回调排入队列的，则该定时器直到下一次事件循环迭代才会被触发。</p>\n<p>如果 <code>callback</code> 不是一个函数，则抛出 <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a>。</p>\n"
            },
            {
              "textRaw": "setInterval(callback, delay[, ...args])",
              "type": "method",
              "name": "setInterval",
              "meta": {
                "added": [
                  "v0.0.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} 当定时器到点时要调用的函数。 ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "当定时器到点时要调用的函数。"
                    },
                    {
                      "textRaw": "`delay` {number} 调用 `callback` 之前要等待的毫秒数。 ",
                      "name": "delay",
                      "type": "number",
                      "desc": "调用 `callback` 之前要等待的毫秒数。"
                    },
                    {
                      "textRaw": "`...args` {any} 当调用 `callback` 时要传入的可选参数。 ",
                      "name": "http://nodejs.cn/api/...args",
                      "type": "any",
                      "desc": "当调用 `callback` 时要传入的可选参数。",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "delay"
                    },
                    {
                      "name": "http://nodejs.cn/api/...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>预定每隔 <code>delay</code> 毫秒重复执行的 <code>callback</code>。\n返回一个用于 <a href=\"timers.html#timers_clearinterval_timeout\"><code>clearInterval()</code></a> 的 <code>Timeout</code>。</p>\n<p>当 <code>delay</code> 大于 <code>2147483647</code> 或小于 <code>1</code> 时，<code>delay</code> 会被设为 <code>1</code>。</p>\n<p>如果 <code>callback</code> 不是一个函数，则抛出 <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a>。</p>\n"
            },
            {
              "textRaw": "setTimeout(callback, delay[, ...args])",
              "type": "method",
              "name": "setTimeout",
              "meta": {
                "added": [
                  "v0.0.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`callback` {Function} 当定时器到点时要调用的函数。 ",
                      "name": "callback",
                      "type": "Function",
                      "desc": "当定时器到点时要调用的函数。"
                    },
                    {
                      "textRaw": "`delay` {number} 调用 `callback` 之前要等待的毫秒数。 ",
                      "name": "delay",
                      "type": "number",
                      "desc": "调用 `callback` 之前要等待的毫秒数。"
                    },
                    {
                      "textRaw": "`...args` {any} 当调用 `callback` 时要传入的可选参数。 ",
                      "name": "http://nodejs.cn/api/...args",
                      "type": "any",
                      "desc": "当调用 `callback` 时要传入的可选参数。",
                      "optional": true
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "callback"
                    },
                    {
                      "name": "delay"
                    },
                    {
                      "name": "http://nodejs.cn/api/...args",
                      "optional": true
                    }
                  ]
                }
              ],
              "desc": "<p>预定在 <code>delay</code> 毫秒之后执行的单次 <code>callback</code>。\n返回一个用于 <a href=\"timers.html#timers_cleartimeout_timeout\"><code>clearTimeout()</code></a> 的 <code>Timeout</code>。</p>\n<p><code>callback</code> 可能不会精确地在 <code>delay</code> 毫秒被调用。\nNode.js 不能保证回调被触发的确切时间，也不能保证它们的顺序。\n回调会在尽可能接近所指定的时间上调用。</p>\n<p>注意：当 <code>delay</code> 大于 <code>2147483647</code> 或小于 <code>1</code> 时，<code>delay</code> 会被设为 <code>1</code>。</p>\n<p>如果 <code>callback</code> 不是一个函数，则抛出 <a href=\"errors.html#errors_class_typeerror\"><code>TypeError</code></a>。</p>\n"
            }
          ],
          "type": "module",
          "displayName": "Scheduling Timers"
        },
        {
          "textRaw": "Cancelling Timers",
          "name": "cancelling_timers",
          "desc": "<p><a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a>、<a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> 和 <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> 方法每次都会返回表示预定的计时器的对象。\n它们可用于取消定时器并防止触发。</p>\n",
          "methods": [
            {
              "textRaw": "clearImmediate(immediate)",
              "type": "method",
              "name": "clearImmediate",
              "meta": {
                "added": [
                  "v0.9.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`immediate` {Immediate} 一个 [`setImmediate()`] 返回的 `Immediate` 对象。  ",
                      "name": "immediate",
                      "type": "Immediate",
                      "desc": "一个 [`setImmediate()`] 返回的 `Immediate` 对象。"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "immediate"
                    }
                  ]
                }
              ],
              "desc": "<p>取消一个由 <a href=\"timers.html#timers_setimmediate_callback_args\"><code>setImmediate()</code></a> 创建的 <code>Immediate</code> 对象。</p>\n"
            },
            {
              "textRaw": "clearInterval(timeout)",
              "type": "method",
              "name": "clearInterval",
              "meta": {
                "added": [
                  "v0.0.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`timeout` {Timeout} 一个 [`setInterval()`] 返回的 `Timeout` 对象。  ",
                      "name": "timeout",
                      "type": "Timeout",
                      "desc": "一个 [`setInterval()`] 返回的 `Timeout` 对象。"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    }
                  ]
                }
              ],
              "desc": "<p>取消一个由 <a href=\"timers.html#timers_setinterval_callback_delay_args\"><code>setInterval()</code></a> 创建的 <code>Timeout</code> 对象。</p>\n"
            },
            {
              "textRaw": "clearTimeout(timeout)",
              "type": "method",
              "name": "clearTimeout",
              "meta": {
                "added": [
                  "v0.0.1"
                ]
              },
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "`timeout` {Timeout} 一个 [`setTimeout()`] 返回的 `Timeout` 对象。  ",
                      "name": "timeout",
                      "type": "Timeout",
                      "desc": "一个 [`setTimeout()`] 返回的 `Timeout` 对象。"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "timeout"
                    }
                  ]
                }
              ],
              "desc": "<p>取消一个由 <a href=\"timers.html#timers_settimeout_callback_delay_args\"><code>setTimeout()</code></a> 创建的 <code>Timeout</code> 对象。</p>\n"
            }
          ],
          "type": "module",
          "displayName": "Cancelling Timers"
        }
      ],
      "type": "module",
      "displayName": "Timers"
    }
  ]
}